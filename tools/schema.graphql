# An object.
type Audio implements MediaInterface {
  # Unique identifier for the object.
  id: ID!

  # The date the object was published, in the timezone of the site.
  date: String

  # The date the object was published, as GMT.
  date_gmt: String
  guid: Guid

  # The date the object was modified, in the timezone of the site.
  modified: String

  # The date the object was modified, as GMT.
  modified_gmt: String

  # An alphanumeric identifier for the object unique to its type.
  slug: String

  # Type of Post for the object.
  type: String

  # URL to the object.
  link: String
  title: Title
  comment_status: COMMENT_STATUS
  ping_status: PING_STATUS

  # The theme file to use to display the object.
  template: String

  # The author object of the item.
  author: User

  # Meta fields.
  meta: [Meta]
  _links: MediaLinks
  description: Description
  caption: Caption

  # Alternative text to display when attachment is not displayed.
  alt_text: String
  media_type: MEDIA_TYPE

  # The attachment MIME type.
  mime_type: String

  # URL to the original attachment file.
  source_url: String

  # The ID for the associated post of the attachment.
  post: ID!
  media_details: AudioDetails
}

# The details for the media.
type AudioDetails {
  title: String
}

# Avatar info.
type Avatar {
  size: Int
  url: String
}

# The caption for the object.
type Caption {
  # HTML for the object, transformed for display.
  rendered: String
}

# A unique identifier for a post.
type Category implements TermInterface {
  # Unique identifier for the object.
  id: ID!

  # The object description.
  description: String

  # URL to the object.
  link: String

  # HTML title for the object.
  name: String

  # An alphanumeric identifier for the object unique to its type.
  slug: String

  # Type attribution for the term.
  taxonomy: Taxonomy

  # Number of published posts for the term.
  count: Int

  # Meta fields.
  meta: [Meta]
  _links: CategoryLinks

  # The parent term ID.
  parent: Category
}

# Collection of categories based on cursors.
type CategoryCollection {
  # A list of results
  results(after: String, first: Int, before: String, last: Int): CategoryConnection
}

# A connection to a list of items.
type CategoryConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [CategoryEdge]
}

# An edge in a connection.
type CategoryEdge {
  # The item at the end of the edge
  node: Category

  # A cursor for use in pagination
  cursor: String!
}

# The links for a post.
type CategoryLinks {
  self: [Link]
  collection: [Link]
  about: [Link]
  up: [EmbeddableLink]
  post_type: [TermLink]
  curies: [TemplatedLink]
}

# An object.
type Comment {
  # Unique identifier for the object.
  id: ID!

  # The author object of the item.
  author: User

  # The date the object was published, in the timezone of the site.
  date: String

  # The date the object was published, as GMT.
  date_gmt: String
  content: Content

  # URL to the object.
  link: String

  # The ID of the associated post object.
  post: Post

  # The ID for the parent of the object.
  parent: ID

  # Display name for the object author.
  author_name: String

  # URL for the object author.
  author_url: String

  # State of the object.
  status: String

  # Type of Comment for the object.
  type: String

  # Avatar URLs for the object author.
  author_avatar_urls: [Avatar]

  # Meta fields.
  meta: [Meta]
  _links: CommentLinks
}

# Sort collection by object attribute.
enum COMMENT_ORDERBY {
  ID
  INCLUDE
  DATE
  DATE_GMT
  POST
  PARENT
  TYPE
}

# Whether or not comments are open on the object.
enum COMMENT_STATUS {
  OPEN
  CLOSED
}

# Collection of comments based on cursors.
type CommentCollection {
  # A list of results
  results(after: String, first: Int, before: String, last: Int): CommentConnection
}

# A connection to a list of items.
type CommentConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [CommentEdge]
}

# An edge in a connection.
type CommentEdge {
  # The item at the end of the edge
  node: Comment

  # A cursor for use in pagination
  cursor: String!
}

# The links for a comment.
type CommentLinks {
  self: [Link]
  collection: [Link]
  author: [EmbeddableLink]
  up: [PostTypeLink]
}

# The content for the object.
type Content {
  # HTML for the object, transformed for display.
  rendered: String

  # Whether the field is protected with a password.
  protected: Boolean
}

# The description for the object.
type Description {
  # HTML for the object, transformed for display.
  rendered: String
}

# An embeddable link for an entity.
type EmbeddableLink {
  href: String
  embeddable: Boolean
}

# The excerpt for the object.
type Excerpt {
  # HTML for the object, transformed for display.
  rendered: String

  # Whether the field is protected with a password.
  protected: Boolean
}

# The format for the object.
enum FORMAT {
  STANDARD
  ASIDE
  CHAT
  GALLERY
  LINK
  IMAGE
  QUOTE
  STATUS
  VIDEO
  AUDIO
}

# The globally unique identifier for the object.
type Guid {
  # HTML for the object, transformed for display.
  rendered: String
}

# An object.
type Image implements MediaInterface {
  # Unique identifier for the object.
  id: ID!

  # The date the object was published, in the timezone of the site.
  date: String

  # The date the object was published, as GMT.
  date_gmt: String
  guid: Guid

  # The date the object was modified, in the timezone of the site.
  modified: String

  # The date the object was modified, as GMT.
  modified_gmt: String

  # An alphanumeric identifier for the object unique to its type.
  slug: String

  # Type of Post for the object.
  type: String

  # URL to the object.
  link: String
  title: Title
  comment_status: COMMENT_STATUS
  ping_status: PING_STATUS

  # The theme file to use to display the object.
  template: String

  # The author object of the item.
  author: User

  # Meta fields.
  meta: [Meta]
  _links: MediaLinks
  description: Description
  caption: Caption

  # Alternative text to display when attachment is not displayed.
  alt_text: String
  media_type: MEDIA_TYPE

  # The attachment MIME type.
  mime_type: String

  # URL to the original attachment file.
  source_url: String

  # The ID for the associated post of the attachment.
  post: ID!
  media_details: ImageDetails
}

# The details for the media.
type ImageDetails {
  width: Int
  height: Int
  file: String
  sizes: [MediaSize]
}

# A link for a post.
type Link {
  href: String
}

union Media = Image | Audio | Video

# Attachment type.
enum MEDIA_TYPE {
  IMAGE
  VIDEO
  AUDIO
  APPLICATION
  FILE
}

# Collection of media based on cursors.
type MediaCollection {
  # A list of results
  results(after: String, first: Int, before: String, last: Int): MediaConnection
}

# A connection to a list of items.
type MediaConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [MediaEdge]
}

# An edge in a connection.
type MediaEdge {
  # The item at the end of the edge
  node: Media

  # A cursor for use in pagination
  cursor: String!
}

interface MediaInterface {
  # Unique identifier for the object.
  id: ID!

  # The date the object was published, in the timezone of the site.
  date: String

  # The date the object was published, as GMT.
  date_gmt: String
  guid: Guid

  # The date the object was modified, in the timezone of the site.
  modified: String

  # The date the object was modified, as GMT.
  modified_gmt: String

  # An alphanumeric identifier for the object unique to its type.
  slug: String

  # Type of Post for the object.
  type: String

  # URL to the object.
  link: String
  title: Title
  comment_status: COMMENT_STATUS
  ping_status: PING_STATUS

  # The theme file to use to display the object.
  template: String
  meta: [Meta]
  author: User
  _links: MediaLinks
  description: Description
  caption: Caption

  # Alternative text to display when attachment is not displayed.
  alt_text: String
  media_type: MEDIA_TYPE

  # The attachment MIME type.
  mime_type: String

  # URL to the original attachment file.
  source_url: String

  # The ID for the associated post of the attachment.
  post: ID!
}

# The links for the media.
type MediaLinks {
  self: [Link]
  collection: [Link]
  about: [Link]
  author: [EmbeddableLink]
  replies: [EmbeddableLink]
}

# The details for the media size.
type MediaSize {
  name: String
  width: Int
  height: Int
  file: String
  mime_type: String
  source_url: String
}

# A metadata field for an object.
type Meta {
  # Name for the metadata field.
  name: String

  # Value for the metadata field.
  value: String
}

# A nav menu.
type NavMenu {
  # Unique identifier for the object.
  id: ID!

  # HTML title for the object.
  name: String

  # The object description.
  description: String

  # Items associated with the menu.
  items: [NavMenuItem]
  _links: NavMenuLinks
}

# Collection of nav menus based on cursors.
type NavMenuCollection {
  # A list of results
  results(after: String, first: Int, before: String, last: Int): NavMenuConnection
}

# A connection to a list of items.
type NavMenuConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [NavMenuEdge]
}

# An edge in a connection.
type NavMenuEdge {
  # The item at the end of the edge
  node: NavMenu

  # A cursor for use in pagination
  cursor: String!
}

# A nav menu item.
type NavMenuItem {
  # Menu item ID.
  id: ID

  # Menu item that this item is a child of.
  parent: ID

  # The order that this item appears in the menu.
  order: Int

  # The classification of object.
  type: String

  # The type of object.
  object: String

  # The id of the object.
  object_id: ID

  # The object type label.
  label: String

  # The item url.
  url: String

  # The display name for the item.
  title: String

  # The target for the item.
  target: String

  # The attribute title for the item.
  attr_title: String

  # A description of the item.
  description: String

  # CSS classes to use with the item.
  classes: [String]

  # Associated XFN value(s).
  xfn: String
}

# The links for a nav menu.
type NavMenuLinks {
  collection: [Link]
  items: [Link]
  curies: [TemplatedLink]
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Order sort attribute ascending or descending.
enum ORDER {
  ASC
  DESC
}

# An object.
type Page implements PostInterface {
  # Unique identifier for the object.
  id: ID!

  # The date the object was published, in the timezone of the site.
  date: String

  # The date the object was published, as GMT.
  date_gmt: String
  guid: Guid

  # The date the object was modified, in the timezone of the site.
  modified: String

  # The date the object was modified, as GMT.
  modified_gmt: String

  # An alphanumeric identifier for the object unique to its type.
  slug: String

  # Type of Post for the object.
  type: String

  # URL to the object.
  link: String
  title: Title
  content: Content
  excerpt: Excerpt
  comment_status: COMMENT_STATUS
  ping_status: PING_STATUS

  # The theme file to use to display the object.
  template: String

  # The author object of the item.
  author: User

  # The featured media for the object.
  featured_media: Media

  # Meta fields.
  meta: [Meta]
  _links: PageLinks

  # The ID for the parent of the object.
  parent: Page

  # The order of the object in relation to other object of its type.
  menu_order: Int
}

# Sort collection by object attribute.
enum PAGE_ORDERBY {
  DATE
  RELEVANCE
  ID
  INCLUDE
  TITLE
  SLUG
  MENU_ORDER
}

# Collection of pages based on cursors.
type PageCollection {
  # A list of results
  results(after: String, first: Int, before: String, last: Int): PageConnection
}

# A connection to a list of items.
type PageConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [PageEdge]
}

# An edge in a connection.
type PageEdge {
  # The item at the end of the edge
  node: Page

  # A cursor for use in pagination
  cursor: String!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

# The links for a page.
type PageLinks {
  self: [Link]
  collection: [Link]
  about: [Link]
  author: [EmbeddableLink]
  replies: [EmbeddableLink]
  history: [Link]
  attachment: [Link]
  term: [TermLink]
  curies: [TemplatedLink]
  up: [EmbeddableLink]
}

# Whether or not the object can be pinged.
enum PING_STATUS {
  OPEN
  CLOSED
}

# A read-only post object.
type Post implements PostInterface {
  # Unique identifier for the object.
  id: ID!

  # The date the object was published, in the timezone of the site.
  date: String

  # The date the object was published, as GMT.
  date_gmt: String
  guid: Guid

  # The date the object was modified, in the timezone of the site.
  modified: String

  # The date the object was modified, as GMT.
  modified_gmt: String

  # An alphanumeric identifier for the object unique to its type.
  slug: String

  # Type of Post for the object.
  type: String

  # URL to the object.
  link: String
  title: Title
  content: Content
  excerpt: Excerpt
  comment_status: COMMENT_STATUS
  ping_status: PING_STATUS

  # The theme file to use to display the object.
  template: String
  format: FORMAT

  # The author object of the item.
  author: User

  # The featured media for the object.
  featured_media: Media

  # Meta fields.
  meta: [Meta]

  # Whether or not the object should be treated as sticky.
  sticky: Boolean
  _links: PostLinks

  # The terms assigned to the object in the category taxonomy.
  categories: [Category]

  # The terms assigned to the object in the post_tag taxonomy.
  tags: [Tag]
}

# Sort collection by object attribute.
enum POST_ORDERBY {
  DATE
  RELEVANCE
  ID
  INCLUDE
  TITLE
  SLUG
}

# Collection of posts based on cursors.
type PostCollection {
  # A list of results
  results(after: String, first: Int, before: String, last: Int): PostConnection
}

# A connection to a list of items.
type PostConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [PostEdge]
}

# An edge in a connection.
type PostEdge {
  # The item at the end of the edge
  node: Post

  # A cursor for use in pagination
  cursor: String!
}

interface PostInterface {
  # Unique identifier for the object.
  id: ID!

  # The date the object was published, in the timezone of the site.
  date: String

  # The date the object was published, as GMT.
  date_gmt: String
  guid: Guid

  # The date the object was modified, in the timezone of the site.
  modified: String

  # The date the object was modified, as GMT.
  modified_gmt: String

  # An alphanumeric identifier for the object unique to its type.
  slug: String

  # Type of Post for the object.
  type: String

  # URL to the object.
  link: String
  title: Title
  content: Content
  excerpt: Excerpt
  comment_status: COMMENT_STATUS
  ping_status: PING_STATUS

  # The theme file to use to display the object.
  template: String
  meta: [Meta]
  author: User
  featured_media: Media
}

# The links for a post.
type PostLinks {
  self: [Link]
  collection: [Link]
  about: [Link]
  author: [EmbeddableLink]
  replies: [EmbeddableLink]
  history: [Link]
  attachment: [Link]
  term: [TermLink]
  curies: [TemplatedLink]
}

# An embeddable link for an entity.
type PostTypeLink {
  href: String
  embeddable: Boolean
  post_type: String
}

# WordPress REST API read-only data
type Query {
  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
  posts(
    # Current page of the collection.
    page: Int

    # Maximum number of items to be returned in result set.
    per_page: Int

    # Offset the result set by a specific number of items.
    offset: Int
    order: ORDER

    # Limit results to those matching a string.
    search: String

    # Limit result set to specific IDs (value or comma-separated values).
    include: String

    # Ensure result set excludes specific IDs (value or comma-separated values).
    exclude: String

    # Limit response to items published after a given ISO8601 compliant date.
    after: String

    # Limit response to items published before a given ISO8601 compliant date.
    before: String

    # Limit result set to items assigned to specific authors (value or comma-separated values).
    author: String

    # Ensure result set excludes items assigned to specific authors (value or comma-separated values).
    author_exclude: String

    # Limit result set to items with one or more specific slugs (value or comma-separated values).
    slug: String
    orderby: POST_ORDERBY
    categories: String
    categories_exclude: String
    tags: String
    tags_exclude: String
    year: Int
  ): PostCollection
  stickies(
    # Current page of the collection.
    page: Int

    # Maximum number of items to be returned in result set.
    per_page: Int

    # Offset the result set by a specific number of items.
    offset: Int
    order: ORDER

    # Limit results to those matching a string.
    search: String

    # Limit result set to specific IDs (value or comma-separated values).
    include: String

    # Ensure result set excludes specific IDs (value or comma-separated values).
    exclude: String

    # Limit response to items published after a given ISO8601 compliant date.
    after: String

    # Limit response to items published before a given ISO8601 compliant date.
    before: String

    # Limit result set to items assigned to specific authors (value or comma-separated values).
    author: String

    # Ensure result set excludes items assigned to specific authors (value or comma-separated values).
    author_exclude: String

    # Limit result set to items with one or more specific slugs (value or comma-separated values).
    slug: String
    orderby: POST_ORDERBY
    categories: String
    categories_exclude: String
    tags: String
    tags_exclude: String
  ): PostCollection
  post(
    # Unique identifier for the object.
    id: ID

    # An alphanumeric identifier for the object unique to its type.
    slug: String
  ): Post
  users(
    # Current page of the collection.
    page: Int

    # Maximum number of items to be returned in result set.
    per_page: Int

    # Offset the result set by a specific number of items.
    offset: Int
    order: ORDER

    # Limit results to those matching a string.
    search: String

    # Limit result set to specific IDs (value or comma-separated values).
    include: String

    # Ensure result set excludes specific IDs (value or comma-separated values).
    exclude: String

    # Limit result set to items with one or more specific slugs (value or comma-separated values).
    slug: String
    orderby: USER_ORDERBY

    # Limit result set to users matching at least one specific role provided.
    # Accepts csv list or single role (value or comma-separated values).
    roles: String
  ): UserCollection
  user(
    # Unique identifier for the object.
    id: ID

    # An alphanumeric identifier for the object unique to its type.
    slug: String
  ): User
  categories(
    # Current page of the collection.
    page: Int

    # Maximum number of items to be returned in result set.
    per_page: Int

    # Offset the result set by a specific number of items.
    offset: Int
    order: ORDER

    # Limit results to those matching a string.
    search: String

    # Limit result set to specific IDs (value or comma-separated values).
    include: String

    # Ensure result set excludes specific IDs (value or comma-separated values).
    exclude: String

    # Limit result set to items with one or more specific slugs (value or comma-separated values).
    slug: String
    orderby: TAXONOMY_ORDERBY

    # Whether to hide terms not assigned to any posts.
    hide_empty: Boolean

    # Limit result set to terms assigned to a specific post.
    post: ID

    # Limit result set to terms assigned to a specific parent.
    parent: Int
  ): CategoryCollection
  category(
    # Unique identifier for the object.
    id: ID

    # An alphanumeric identifier for the object unique to its type.
    slug: String
  ): Category
  tags(
    # Current page of the collection.
    page: Int

    # Maximum number of items to be returned in result set.
    per_page: Int

    # Offset the result set by a specific number of items.
    offset: Int
    order: ORDER

    # Limit results to those matching a string.
    search: String

    # Limit result set to specific IDs (value or comma-separated values).
    include: String

    # Ensure result set excludes specific IDs (value or comma-separated values).
    exclude: String

    # Limit result set to items with one or more specific slugs (value or comma-separated values).
    slug: String
    orderby: TAXONOMY_ORDERBY

    # Whether to hide terms not assigned to any posts.
    hide_empty: Boolean

    # Limit result set to terms assigned to a specific post.
    post: ID
  ): TagCollection
  tag(
    # Unique identifier for the object.
    id: ID

    # An alphanumeric identifier for the object unique to its type.
    slug: String
  ): Tag
  pages(
    # Current page of the collection.
    page: Int

    # Maximum number of items to be returned in result set.
    per_page: Int

    # Offset the result set by a specific number of items.
    offset: Int
    order: ORDER

    # Limit results to those matching a string.
    search: String

    # Limit result set to specific IDs (value or comma-separated values).
    include: String

    # Ensure result set excludes specific IDs (value or comma-separated values).
    exclude: String

    # Limit response to items published after a given ISO8601 compliant date.
    after: String

    # Limit response to items published before a given ISO8601 compliant date.
    before: String

    # Limit result set to items of specific parent IDs (value or comma-separated values).
    parent: String

    # Ensure result set excludes specific parent IDs (value or comma-separated values).
    parent_exclude: String

    # Limit result set to items assigned to specific authors (value or comma-separated values).
    author: String

    # Ensure result set excludes items assigned to specific authors (value or comma-separated values).
    author_exclude: String

    # Limit result set to items with one or more specific slugs (value or comma-separated values).
    slug: String

    # Limit result set to posts with a specific menu_order value.
    menu_order: Int
    orderby: PAGE_ORDERBY
  ): PageCollection
  page(
    # Unique identifier for the object.
    id: ID

    # Human-readable identifier for the object.
    slug: String
  ): Page
  comments(
    # Current page of the collection.
    page: Int

    # Maximum number of items to be returned in result set.
    per_page: Int

    # Offset the result set by a specific number of items.
    offset: Int
    order: ORDER

    # Limit results to those matching a string.
    search: String

    # Limit result set to specific IDs (value or comma-separated values).
    include: String

    # Ensure result set excludes specific IDs (value or comma-separated values).
    exclude: String

    # Limit response to items published after a given ISO8601 compliant date.
    after: String

    # Limit response to items published before a given ISO8601 compliant date.
    before: String

    # Limit result set to items of specific parent IDs (value or comma-separated values).
    parent: String

    # Ensure result set excludes specific parent IDs (value or comma-separated values).
    parent_exclude: String

    # Limit result set to comments assigned to specific post IDs.
    post: ID
    orderby: COMMENT_ORDERBY
  ): CommentCollection
  comment(
    # Unique identifier for the object.
    id: ID

    # An alphanumeric identifier for the object unique to its type.
    slug: String
  ): Comment

  # List of types.
  types: [Type]
  type(
    # Unique identifier for the object.
    id: ID

    # An alphanumeric identifier for the object unique to its type.
    slug: String
  ): Type

  # List of taxonomies.
  taxonomies: [Taxonomy]
  taxonomy(
    # Unique identifier for the object.
    id: ID

    # An alphanumeric identifier for the object unique to its type.
    slug: String
  ): Taxonomy
  media(
    # Current page of the collection.
    page: Int

    # Maximum number of items to be returned in result set.
    per_page: Int

    # Offset the result set by a specific number of items.
    offset: Int
    order: ORDER

    # Limit results to those matching a string.
    search: String

    # Limit result set to specific IDs (value or comma-separated values).
    include: String

    # Ensure result set excludes specific IDs (value or comma-separated values).
    exclude: String

    # Limit response to items published after a given ISO8601 compliant date.
    after: String

    # Limit response to items published before a given ISO8601 compliant date.
    before: String

    # Limit result set to items of specific parent IDs (value or comma-separated values).
    parent: String

    # Ensure result set excludes specific parent IDs (value or comma-separated values).
    parent_exclude: String

    # Limit result set to items assigned to specific authors (value or comma-separated values).
    author: String

    # Ensure result set excludes items assigned to specific authors (value or comma-separated values).
    author_exclude: String

    # Limit result set to items with one or more specific slugs (value or comma-separated values).
    slug: String
    orderby: POST_ORDERBY

    # Limit result set to attachments of a particular media type.
    media_type: MEDIA_TYPE

    # Limit result set to attachments of a particular MIME type.
    mime_type: String
  ): MediaCollection
  medium(
    # Unique identifier for the object.
    id: ID

    # An alphanumeric identifier for the object unique to its type.
    slug: String
  ): Media
  sidebars: SidebarCollection
  sidebar(
    # Unique identifier for the object.
    id: ID

    # An alphanumeric identifier for the object unique to its type.
    slug: String
  ): Sidebar

  # List of statuses.
  statuses: [Status]
  status(
    # Unique identifier for the object.
    id: ID

    # An alphanumeric identifier for the object unique to its type.
    slug: String
  ): Status
  navMenus: NavMenuCollection
  navMenu(
    # Unique identifier for the object.
    id: ID

    # An alphanumeric identifier for the object unique to its type.
    slug: String
  ): NavMenu
}

# A widget area.
type Sidebar {
  # Unique identifier for the object.
  id: ID!

  # HTML title for the object.
  name: String

  # The object description.
  description: String

  # Extra CSS class to assign to the sidebar in the Widgets interface.
  classname: String

  # HTML content to prepend to each widget's HTML output when assigned to this sidebar.
  before_widget: String

  # HTML content to append to each widget's HTML output when assigned to this sidebar.
  after_widget: String

  # HTML content to prepend to the sidebar title when displayed.
  before_title: String

  # HTML content to append to the sidebar title when displayed.
  after_title: String

  # HTML widgets associated with the sidebar.
  widgets: [Widget]
  _links: SidebarLinks
}

# Collection of sidebars based on cursors.
type SidebarCollection {
  # A list of results
  results(after: String, first: Int, before: String, last: Int): SidebarConnection
}

# A connection to a list of items.
type SidebarConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [SidebarEdge]
}

# An edge in a connection.
type SidebarEdge {
  # The item at the end of the edge
  node: Sidebar

  # A cursor for use in pagination
  cursor: String!
}

# The links for a sidebar.
type SidebarLinks {
  collection: [Link]
  items: [Link]
  curies: [TemplatedLink]
}

# A post status.
type Status {
  # Unique identifier for the object.
  id: ID!

  # HTML title for the object.
  name: String

  # An alphanumeric identifier for the object unique to its type.
  slug: String

  # Whether posts of this status should be shown in the front end of the site.
  public: Boolean

  # Whether posts with this status should be publicly-queryable.
  queryable: Boolean
  _links: StatusLinks
}

# The links for a status.
type StatusLinks {
  archives: [Link]
}

# A unique identifier for a post.
type Tag implements TermInterface {
  # Unique identifier for the object.
  id: ID!

  # The object description.
  description: String

  # URL to the object.
  link: String

  # HTML title for the object.
  name: String

  # An alphanumeric identifier for the object unique to its type.
  slug: String

  # Type attribution for the term.
  taxonomy: Taxonomy

  # Number of published posts for the term.
  count: Int

  # Meta fields.
  meta: [Meta]
  _links: TagLinks
}

# Collection of tags based on cursors.
type TagCollection {
  # A list of results
  results(after: String, first: Int, before: String, last: Int): TagConnection
}

# A connection to a list of items.
type TagConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [TagEdge]
}

# An edge in a connection.
type TagEdge {
  # The item at the end of the edge
  node: Tag

  # A cursor for use in pagination
  cursor: String!
}

# The links for a post.
type TagLinks {
  self: [Link]
  collection: [Link]
  about: [Link]
  post_type: [TermLink]
  curies: [TemplatedLink]
}

# A taxonomy type.
type Taxonomy {
  # Unique identifier for the object.
  id: ID!

  # HTML title for the object.
  name: String

  # An alphanumeric identifier for the object unique to its type.
  slug: String

  # The object description.
  description: String

  # Types associated with the taxonomy.
  types: [String]

  # Whether or not the taxonomy should have children.
  hierarchical: Boolean

  # REST base route for the taxonomy.
  rest_base: String
  _links: TaxonomyLinks
}

# Sort collection by term attribute.
enum TAXONOMY_ORDERBY {
  ID
  INCLUDE
  NAME
  SLUG
  TERM_GROUP
  DESCRIPTION
  COUNT
}

# The links for a taxonomy.
type TaxonomyLinks {
  collection: [Link]
  items: [Link]
  curies: [TemplatedLink]
}

type TemplatedLink {
  name: String
  href: String
  templated: Boolean
}

# Term fields.
interface TermInterface {
  # Unique identifier for the object.
  id: ID!

  # The object description.
  description: String

  # URL to the object.
  link: String

  # HTML title for the object.
  name: String

  # An alphanumeric identifier for the object unique to its type.
  slug: String
  count: Int
  taxonomy: Taxonomy
  meta: [Meta]
}

type TermLink {
  taxonomy: String
  href: String
  embeddable: Boolean
}

# The title for an object.
type Title {
  # HTML for the object, transformed for display.
  rendered: String
}

# A post type.
type Type {
  # Unique identifier for the object.
  id: ID!

  # The object description.
  description: String

  # HTML title for the object.
  name: String

  # An alphanumeric identifier for the object unique to its type.
  slug: String

  # Whether or not the post type should have children.
  hierarchical: Boolean

  # Taxonomies associated with post type.
  taxonomies: [String]

  # REST base route for the post type.
  rest_base: String
  _links: TypeLinks
}

# The links for a type.
type TypeLinks {
  collection: [Link]
  items: [Link]
  curies: [TemplatedLink]
}

# An object.
type User {
  # Unique identifier for the object.
  id: ID!

  # HTML title for the object.
  name: String

  # The object description.
  description: String

  # URL to the object.
  link: String

  # An alphanumeric identifier for the object unique to its type.
  slug: String

  # Avatar URLs for the user.
  avatar_urls: [Avatar]
  _links: UserLinks
}

# Sort collection by object attribute.
enum USER_ORDERBY {
  ID
  INCLUDE
  NAME
  REGISTERED_DATE
  SLUG
  EMAIL
  URL
}

# Collection of users based on cursors.
type UserCollection {
  # A list of results
  results(after: String, first: Int, before: String, last: Int): UserConnection
}

# A connection to a list of items.
type UserConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [UserEdge]
}

# An edge in a connection.
type UserEdge {
  # The item at the end of the edge
  node: User

  # A cursor for use in pagination
  cursor: String!
}

# The links for a user.
type UserLinks {
  self: [Link]
  collection: [Link]
}

# An object.
type Video implements MediaInterface {
  # Unique identifier for the object.
  id: ID!

  # The date the object was published, in the timezone of the site.
  date: String

  # The date the object was published, as GMT.
  date_gmt: String
  guid: Guid

  # The date the object was modified, in the timezone of the site.
  modified: String

  # The date the object was modified, as GMT.
  modified_gmt: String

  # An alphanumeric identifier for the object unique to its type.
  slug: String

  # Type of Post for the object.
  type: String

  # URL to the object.
  link: String
  title: Title
  comment_status: COMMENT_STATUS
  ping_status: PING_STATUS

  # The theme file to use to display the object.
  template: String

  # The author object of the item.
  author: User

  # Meta fields.
  meta: [Meta]
  _links: MediaLinks
  description: Description
  caption: Caption

  # Alternative text to display when attachment is not displayed.
  alt_text: String
  media_type: MEDIA_TYPE

  # The attachment MIME type.
  mime_type: String

  # URL to the original attachment file.
  source_url: String

  # The ID for the associated post of the attachment.
  post: ID!
  media_details: VideoDetails
}

# The details for the media.
type VideoDetails {
  title: String
}

# A widget.
type Widget {
  # Identifier for widget.
  id: String

  # HTML title for the object.
  name: String

  # The object description.
  description: String

  # CSS class for the widget.
  classname: String
  content: Content
}
